---
description: 
globs: 
alwaysApply: true
---
Many things have changed in the iced library since you learned about it. The current version of iced is 0.14-dev, and we use a fork with some of our own (minor) modifications. and there's a complete copy of it available for you to reference in /vendor/iced.


### Modified
- text_input::select_range added

### Added
- Some `From` trait implementations for `text_input::Id`.
- Custom `Executor` support for `Application` and `Daemon`.
- `rust-version` metadata to `Cargo.toml`.
- Widget examples to API reference.
- `Program` API.
- `Task` API.
- `Daemon` API and Shell Runtime Unification.
- `rich_text` and `markdown` widgets.
- `stack` widget.
- `hover` widget.
- `row::Wrapping` widget.
- `text` macro helper.
- `text::Wrapping` support.
- Functional widget styling.
- Closure-based widget styling.
- Class-based Theming.
- Type-Driven Renderer Fallback.
- Background styling to `rich_text` widget.
- Underline support for `rich_text`.
- Strikethrough support for `rich_text`.
- Abortable `Task`.
- `abort_on_drop` to `task::Handle`.
- `Ferra` theme.
- `auto-detect-theme` feature.
- Custom key binding support for `text_editor`.
- `align_x` for `text_input` widget.
- `center` widget helper.
- Rotation support for `image` and `svg` widgets.
- Dynamic `opacity` support for `image` and `svg`.
- Scroll transactions for `scrollable` widget.
- `physical_key` and `modified_key` to `keyboard::Event`.
- `fetch_position` command in `window` module.
- `filter_method` property for `image::Viewer` widget.
- Support for pre-multiplied alpha `wgpu` composite mode.
- `text_size` and `line_height` properties for `text_editor` widget.
- `is_focused` method for `text_editor::State`.
- `canvas::Cache` Grouping.
- `ICED_PRESENT_MODE` env var to pick a `wgpu::PresentMode`.
- `SpecificWith` variant to `window::Position`.
- `scale_factor` field to `window::Screenshot`.
- Styling support for `overlay::Menu` of `pick_list` widget.
- `window::Id` in `Event` subscriptions.
- `FromIterator` implementation for `row` and `column`.
- `content_fit` for `image::viewer` widget.
- `Display` implementation for `Radians`.
- Helper methods for `window::Settings` in `Application`.
- `Copy` implementation for `canvas::Fill` and `canvas::Stroke`.
- Clarification of `Border` alignment for `Quad`.
- "Select All" functionality on `Ctrl+A` to `text_editor`.
- `stream::try_channel` helper.
- `iced` widget helper to display the iced logo :comet:.
- `align_x` and `align_y` helpers to `scrollable`.
- Built-in text styles for each `Palette` color.
- Embedded `Scrollbar` support for `scrollable`.
- `on_press_with` method for `button`.
- `resize_events` subscription to `window` module.
- `Link` support to `rich_text` widget.
- `image` and `svg` support for `canvas` widget.
- `Compact` variant for `pane_grid::Controls`.
- `image-without-codecs` feature flag.
- `container::background` styling helper.
- `undecorated_shadow` window setting for Windows.
- Tasks for setting mouse passthrough.
- `*_maybe` helpers for `text_input` widget.
- Wasm support for `download_progress` example.
- `scrollable::scroll_by` widget operation.
- Enhancements to `slider` widget styling.
- `on_scroll` handler to `mouse_area` widget.
- `stroke_rectangle` method to `canvas::Frame`.
- `override_redirect` setting for X11 windows.
- Disabled state support for `toggler` widget.
- `Color::parse` helper for parsing color strings.
- `rounded_rectangle` method to `canvas::Path`.
- `width` method to `text_editor` widget.
- `on_open` handler to `combo_box` widget.
- Additional `mouse::Interaction` cursors.
- Scroll wheel handling in `slider` widget.

### Changed
- Use generic `Content` in `Text` to avoid reallocation in `fill_text`.
- Use `Iterator::size_hint` to initialize `Column` and `Row` capacity.
- Specialize `widget::text` helper.
- Make image `Cache` eviction strategy less aggressive in `iced_wgpu`.
- Retain caches in `iced_wgpu` as long as `Rc` values are alive.
- Reuse `glyphon::Pipeline` state in `iced_wgpu`.
- Ask for explicit `Length` in `center_*` methods.
- Hide internal `Task` constructors.
- Hide `Subscription` internals.
- Improved `view` ergonomics.
- Allow disabled `TextInput` to still be interacted with.
- Enable horizontal scrolling without shift modifier for `srollable` widget.
- Add `mouse::Button` to `mouse::Click`.
- Notify `scrollable::Viewport` changes.


